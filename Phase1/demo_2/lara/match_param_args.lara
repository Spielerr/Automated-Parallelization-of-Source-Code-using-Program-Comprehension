aspectdef test
output stats end

stats = new LaraObject();

var fn_args = {};
var fn_types = {};

println("order of function calls(input2.txt):");
println();


fn_param = {};

select function.varref end
apply

    if(!($function.name in fn_param))
    {
        fn_param[$function.name] = [];
    }

    var all_par = $function.params;
    var no_param = all_par.length;

    fn_types[$function.name] = [];

    for(var i = 0; i < no_param; ++i)
    {
        //println(p[i].name);
        fn_param[$function.name].push(all_par[i].name);
        //fn_types[$function.name]['param'][all_par[i].name] = all_par[i].type.code;
        fn_types[$function.name].push(all_par[i].type.code);
    }

end

select function.call end
apply
    var arg_l = $call.args;
    
    
    println($call.name);
    //println(arg_l);

    if(!($call.name in fn_args))
    {
        fn_args[$call.name] = [];
    }

    
    var temp_l = [];
    
    
    for(i in arg_l)
    {
        //fn_args[$call.name].push(arg_l[i].code);
        temp_l.push(arg_l[i].code);

        print(arg_l[i].type.code + " " + arg_l[i].code);
        print(", " + fn_types[$call.name][i] + " " + fn_param[$call.name][i] + "; ");
        
        //temp_types[arg_l[i].code] = arg_l[i].type.code
    }

    fn_args[$call.name].push(temp_l);
    

    println();
    println();
    
end



//    if($varref.vardecl.isParam)
//    {
//        var param_already_present = 0;
//
//        for(var i = 0; i < fn_param[$function.name].length; ++i)
//        {
//            if($varref.code == fn_param[$function.name][i])
//            {
//                param_already_present = 1;
//                break;
//            }
//        }
//
//
//        if(!(param_already_present))
//        {
//            fn_param[$function.name].push($varref.code);
//        }
//        
//    }

//for(fn1 in fn_param)
//{
//    println(fn1);
//    for(j in fn_param[fn1])
//    {
//        println(fn_param[fn1][j]);
//    }
//}

//for(fn_name in fn_args)
//{
//    println(fn_name);
//
//    var no_of_args = fn_args[fn_name].length;
//
//    for(var i = 0; i<no_of_args; ++i)
//    {
//        println(fn_args[fn_name][i] + ":" + fn_param[fn_name][i]);
//    }
//    
//    println();
//}


var changing_params = {};
select function.varref end
apply

    if(!($function.name in changing_params))
    {
        changing_params[$function.name] = [];
    }
    
    if($varref.useExpr.use == 'read')
    {
        //changing_params[$function.name].push($varref.code);
    }

    if($varref.useExpr.use == 'write')
    {   
        if($varref.vardecl.isParam && !(changing_params[$function.name].includes($varref.code)) )
            changing_params[$function.name].push($varref.code);
    }

end





//select function{'main'} end
//apply

println();
println();
println("functions where write is being performed along with the arguments being modified");
println("(input.txt)");

for(fn_name in changing_params)
{
    var no_of_args = changing_params[fn_name].length;
    if(no_of_args)
    {   
        //println(fn_name);
        for(var i = 0; i<no_of_args; ++i)
        {
            //println(changing_params[fn_name][i] + ":" + fn_args[fn_name][fn_param[fn_name].indexOf(changing_params[fn_name][i])]);
            //println(fn_name + "," + fn_args[fn_name][fn_param[fn_name].indexOf(changing_params[fn_name][i])]);
            //$body.insert after "" + fn_name + "," + fn_args[fn_name][fn_param[fn_name].indexOf(changing_params[fn_name][i])];

            ind = fn_param[fn_name].indexOf(changing_params[fn_name][i]);
            no_of_calls_fn = fn_args[fn_name].length;

            for(var j = 0; j < no_of_calls_fn; ++j)
            {
                println(fn_name + "," + fn_args[fn_name][j][ind]);
            }

        }
        println();
    }
    
}

//end



end




