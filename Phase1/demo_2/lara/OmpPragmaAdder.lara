aspectdef OmpPragmaAdder
output stats end

stats = new LaraObject();

select function.vardecl end
apply
//println( $vardecl.name );
stats.inc( $function.name );
end
    var data_dep = {};
select function.call end
apply
var p = $call.args;
for( var i = 0; i < p.length; ++i)
{
	//println($function.signature + " " + $call.signature + " " + p[i].code);
	if( !($function.signature in data_dep) )
		data_dep[$function.signature] = {};
		
	if( !(p[i].code in data_dep[$function.signature] ) )
		data_dep[$function.signature][p[i].code] = {};
	
	data_dep[$function.signature][p[i].code][$call.signature] = 1;
	// println(p[i].code.vardecl.name);
}
//println(data_dep);

var indep_fns = {};

var var_wise = {};
var fn_wise = {};

end



for(i in data_dep)
{
    //println("1: "+i);
    for(j in data_dep[i])
    {
       //println("2: "+j);
       var count = 0;
       var fn_name;
       //println(data_dep[i][j].length);
        for(k in data_dep[i][j])
        {
            count += 1;
            fn_name = k;
          //println("3: "+ k);
        }
        if(count == 1)
        {
            var_wise[j] = 1;
            fn_wise[fn_name] = 1;
        }
        else
        {
            var_wise[j] = 0;
            //fn_wise[fn_name] = 0;
            for(p in data_dep[i][j])
            {
                fn_wise[p] = 0;
            }
        }
    }
    //println();
}

var fn_arg_rw = {};
select function.varref end
apply

	if($function.signature in fn_wise)
    {  
       
        if(fn_wise[$function.signature]==0)
        {
       
           
            if(!($function.name in fn_arg_rw))
                fn_arg_rw[$function.name] = {};
               
            if($varref.vardecl.isParam)
            {
                if(!($varref.code in fn_arg_rw[$function.name]))
                {
                    fn_arg_rw[$function.name][$varref.code] = 0;
                }
               
                if($varref.useExpr.use == 'read')
                {
                    fn_arg_rw[$function.name][$varref.code] = 1;
                }
               
                if($varref.useExpr.use == 'write')
                {
                    fn_arg_rw[$function.name][$varref.code] = 0;
                }
            }
        }
    }

end

select function{'main'} end
apply
	$function.insert before "\n#include <omp.h>\n";
	$function.body.insert after "\n}\n";
end

flag_first_func = 0;
select function.call end
apply
	for(fn_name in fn_arg_rw)
	{
		var flag = 0;
		for(param in fn_arg_rw[fn_name])
		{
			if(fn_arg_rw[fn_name][param])
			{
				flag = 1;
			}
			else
			{
				flag = 0;
				break;
			}
		}
	
		if(flag)
		{
			if($call.name == fn_name)
			{
				println(fn_name);
				if(!flag_first_func)
				{
					$call.insert before "\n#pragma omp parallel sections\n{\n#pragma omp section\n";
					flag_first_func = 1;
				}
				else
				{
					$call.insert before "\n#pragma omp section\n";
				}
			}
		}
		
	}
end

for(fn_n1 in fn_wise)
{
    if(fn_wise[fn_n1]==1)
    {
        //$function.body.insert after "#pragma omp sections{";
        // println(fn_n1);
//        select $call.signature{iter2} end
//        apply
//            $call.signature.insert before "#pragma omp section{";
//        end
    }
   
   
}



//$function.call.body.insert after "#pragma omp sections{";
for(iter2 in fn_wise)
{
   
    //println(iter2 + ":" + fn_wise[iter2]);
    if(fn_wise[iter2] == 1)
    {
//        $function.body.insert after "#pragma omp sections{";
        //println(iter2);
//        select $call.signature{iter2} end
//        apply
//            $call.signature.insert before "#pragma omp section{";
//        end
    }
    else
    {
        //println("inside else");
    }
}
println();
end
